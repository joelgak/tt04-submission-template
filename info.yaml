--- 
# TinyTapeout project information
project:
  wokwi_id:    369877520120178689        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
#  source_files:        
#    - counter.v
#    - decoder.v
#  top_module:  "tt_um_example"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Joel Gak"      # Your name
  title:        "Digital Key"      # Project title
  language:     "Wokwi" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "It is a Digital Key, a secret code needs to be inputed in order to get a 1 in the output"      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
    It is a Digital Key, a secret code needs to be inputted in order to get a 1 in the output.
    It is composed by a 4 FFD in a shift reg configuration with 3  two input and gates (configured as a 4 input and gate)
    If the proper sequence of data is inputted (0110) the output will be turned On.
    Also all the outputs of the shiftreg are available to se how it works.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
     In the CLK a clock signal is to be inputted
     In the Data In , the sequence 0110 shall be feed to the shift register.
     Detailed sequence
     Set Data_In to 0, toggle clock
     Set Data_In to 1, toggle clock
     Set Data_In to 1, toggle clock
     Set Data In to 0, toggle clock
     The Key_On should be at 1 value now.
     Also all the outputs of the shiftreg are available to see how it works.
     
# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    CLK - clock
    IN0 - Data_In
    
    
    
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    OUT5 Key_ON
    OUT4 FD3_OUTPUT (Q3)
    OUT3 FD2_OUTPUT (Q2)
    OUT2 FD2_OUTPUT (Q1)
    OUT1 FD2_OUTPUT (Q0)
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - none
    - none
    - none
    - none
    - none
    - none
    - none
    - none

# The following fields are optional
  tag:          ""      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     0       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository
